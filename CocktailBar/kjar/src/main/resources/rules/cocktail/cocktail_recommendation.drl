package rules.cocktail;

import com.ftn.sbnz.model.preference.*;
import com.ftn.sbnz.model.user.*;
import com.ftn.sbnz.model.cocktail.*;
import java.util.*
import java.util.stream.Collectors;

import org.drools.core.spi.KnowledgeHelper;


declare Hierarchy
    parent: Long @position(0)
    child: Long @position(1)
end


rule "AccumulateFlavors"
salience(30)
when
  $user: User($userId: id)
  $set: Set() from accumulate(
    FlavorPreference($userId == referenceId, $flavor: flavor),
    collectSet($flavor)
  )
then
  TasteProfile tasteProfile = new TasteProfile();
  tasteProfile.setReferenceId($userId);
  tasteProfile.setFlavors($set);
  insert(tasteProfile);
  System.out.println("Accumulated flavors.");
end


rule "AccumulateIngredientsByFlavor"
salience(25)
when
  $tasteProfile: TasteProfile($flavors: flavors)
  $set: Set() from accumulate(
      $ingredient: Ingredient(flavor memberOf $flavors, recipe == null),
      collectSet($ingredient)
    )
then
  PreferableIngredientList preferableIngredientList = new PreferableIngredientList();
  preferableIngredientList.setReferenceId($tasteProfile.getReferenceId());
  preferableIngredientList.setIngredients($set);

  insert(preferableIngredientList);
  System.out.println("Accumulated ingredients.");
end


rule "CreateHierachy"
salience(20)
when
    $i:Ingredient($id2: id)
    Ingredient(isParentOf($i), $id1: id)
then
    insert(new Hierarchy($id1, $id2));
end


query isParentOf(Long parentId, Long childId)
    Hierarchy(parentId, childId;)
    or (Hierarchy(parentId, middleId;) and isParentOf(middleId, childId;))
end


rule "AddIngredientParents"
salience(20)
when
    $p:PreferableIngredientList($ingredients: ingredients)
    $i1: Ingredient($id1: id)
    Ingredient($id2: id) from $ingredients
    isParentOf($id1, $id2;)
then
    modify($p){
        addIngredient($i1)
    }
end


rule "InsertPreferableCocktailList"
salience(20)
when not(PreferableCocktailList())
then
    insert(new PreferableCocktailList());
    System.out.println("Added preferable cocktail list.");
end


rule "AddCocktailContainingIngredient"
salience(15)
when
    $preferableIngredientList: PreferableIngredientList($ingredients: ingredients)
    $cocktail: Cocktail(isMadeOfIngredients($ingredients))
    $preferableCocktailList: PreferableCocktailList(!containsCocktail($cocktail))
    GlassPreference()
    AlcoholAmountPreference()
then
    modify($preferableCocktailList) {
        addCocktail($cocktail)
    }
    System.out.println("Added cocktail. " + $cocktail.getName() + ". Number of cocktails is " + $preferableCocktailList.getCocktails().size() + ".");
end


rule "FilterCocktailsBasedOnGlass"
when
    $preferableCocktailList: PreferableCocktailList($cocktails: cocktails)
    $glassPreference: GlassPreference($glass: glass)
    $filteredCocktails: Set() from accumulate(
        $cocktail: Cocktail(glass == $glass) from $cocktails,
        collectSet($cocktail)
    )
then
    delete($glassPreference);
    modify($preferableCocktailList){
        setCocktails(new HashSet<Cocktail>($filteredCocktails))
    }
    System.out.println("Filtered cocktails by glass. Number of cocktails is " + $preferableCocktailList.getCocktails().size() + ".");
end


rule "FilterStrongCocktails"
no-loop true
when
    $preferableCocktailList: PreferableCocktailList($cocktails: cocktails)
    $alcoholAmountPreference: AlcoholAmountPreference(isStrong())
    $filteredCocktails: Set() from accumulate(
        $cocktail: Cocktail(calculateStrength() > 10.0) from $cocktails,
        collectSet($cocktail)
    )
then
    delete($alcoholAmountPreference);
    modify($preferableCocktailList){
        setCocktails(new HashSet<Cocktail>($filteredCocktails))
    }
    System.out.println("Filtered strong cocktails. Number of cocktails is " + $preferableCocktailList.getCocktails().size() + ".");
end


rule "FilterMediumCocktails"
when
    $preferableCocktailList: PreferableCocktailList($cocktails: cocktails)
    $alcoholAmountPreference: AlcoholAmountPreference(isMedium())
    $filteredCocktails: Set() from accumulate (
        $cocktail: Cocktail(calculateStrength() > 5.0 && calculateStrength() < 10.0) from $cocktails,
        collectSet($cocktail)
    )
then
    delete($alcoholAmountPreference);
    modify($preferableCocktailList){
        setCocktails(new HashSet<Cocktail>($filteredCocktails))
    }
    System.out.println("Filtered medium cocktails. Number of cocktails is " + $preferableCocktailList.getCocktails().size() + ".");
end


rule "FilterLightCocktails"
when
    $preferableCocktailList: PreferableCocktailList($cocktails: cocktails)
    $alcoholAmountPreference: AlcoholAmountPreference(isLight())
    $filteredCocktails: Set() from accumulate (
        $cocktail: Cocktail(calculateStrength() < 5.0) from $cocktails,
        collectSet($cocktail)
    )
then
    delete($alcoholAmountPreference);
    modify($preferableCocktailList){
        setCocktails(new HashSet<Cocktail>($filteredCocktails))
    }
    System.out.println("Filtered light cocktails. Number of cocktails is " + $preferableCocktailList.getCocktails().size() + ".");
end




